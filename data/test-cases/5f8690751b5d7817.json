{"uid":"5f8690751b5d7817","name":"should create MongoDB database and three collections via API","fullName":"Smoke tests MongoDB database creation with three collections [\"collection1\", \"collection2\", \"collection3\"] via API","historyId":"a6bdf0270b7bf4a6bea165b4b04bcd7d:d41d8cd98f00b204e9800998ecf8427e","time":{"start":1707302436488,"stop":1707302469792,"duration":33304},"description":"This test checks MongoDB database and three collections creation","descriptionHtml":"<p>This test checks MongoDB database and three collections creation</p>\n","status":"passed","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks MongoDB database and three collections creation","status":"passed","steps":[{"name":"Reading and verifying information from processed-monthly-summary-data topic","time":{"start":1707302436795,"stop":1707302456799,"duration":20004},"status":"broken","statusMessage":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","statusTrace":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at /home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/automatedTests/jest/test/kafkaMongoChecks.spec.ts:336:55\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/automatedTests/jest/test/kafkaMongoChecks.spec.ts:5:58)","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Sending GET request to app.js for checking that MongoDB collections exist","time":{"start":1707302436753,"stop":1707302457797,"duration":21044},"status":"broken","statusMessage":"Request failed with status code 500","statusTrace":"AxiosError: Request failed with status code 500\n    at settle (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/node_modules/axios/lib/core/settle.js:19:12)\n    at IncomingMessage.handleStreamEnd (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/node_modules/axios/lib/adapters/http.js:589:11)\n    at IncomingMessage.emit (node:events:530:35)\n    at IncomingMessage.emit (node:domain:488:12)\n    at endReadableNT (node:internal/streams/readable:1696:12)\n    at processTicksAndRejections (node:internal/process/task_queues:82:21)\n    at Axios.request (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/node_modules/axios/lib/core/Axios.js:45:41)\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Sending GET request to app.js for checking that MongoDB collections exist","time":{"start":1707302436750,"stop":1707302469791,"duration":33041},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":3,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"jest"},{"name":"package","value":"test"},{"name":"thread","value":"1"},{"name":"host","value":"fv-az422-156"},{"name":"parentSuite","value":"Smoke tests"},{"name":"owner","value":"John Doe2"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Website","url":"https://dev.example.com/"},{"name":"AUTH-123","type":"issue"},{"name":"TMS-456","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"John Doe2","retries":[],"categories":[],"tags":[]},"source":"5f8690751b5d7817.json","parameterValues":[]}