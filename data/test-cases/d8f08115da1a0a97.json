{"uid":"d8f08115da1a0a97","name":"should create MongoDB database and collection via direct sending event to Kafka","fullName":"MongoDB database and collection creation via Kafka","historyId":"7fa20550448b91768a7d93aebac04068:d41d8cd98f00b204e9800998ecf8427e","time":{"start":1707165326474,"stop":1707165337656,"duration":11182},"description":"This test checks MongoDB database and collection creation","descriptionHtml":"<p>This test checks MongoDB database and collection creation</p>\n","status":"failed","statusMessage":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"MongoDB collection 'directMessageToKafkaCollection' exists in database 'directMessageToKafkaDB'.\"\nReceived: \"MongoDB collection 'directMessageToKafkaCollection' does not exist in database 'directMessageToKafkaDB'.\"","statusTrace":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"MongoDB collection 'directMessageToKafkaCollection' exists in database 'directMessageToKafkaDB'.\"\nReceived: \"MongoDB collection 'directMessageToKafkaCollection' does not exist in database 'directMessageToKafkaDB'.\"\n    at /home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/automatedTests/jest/test/kafkaMongoChecks.spec.ts:122:42\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/automatedTests/jest/test/kafkaMongoChecks.spec.ts:5:58)","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"jest"},{"name":"package","value":"test"},{"name":"thread","value":"1"},{"name":"host","value":"fv-az392-456"},{"name":"owner","value":"John Doe2"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Website","url":"https://dev.example.com/"},{"name":"AUTH-123","type":"issue"},{"name":"TMS-456","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"John Doe2","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"d8f08115da1a0a97.json","parameterValues":[]}