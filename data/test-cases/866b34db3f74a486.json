{"uid":"866b34db3f74a486","name":"should create MongoDB database and collection via direct sending event to Kafka","fullName":"Full regression MongoDB database and collection creation via Kafka","historyId":"3c6e3dd0227bb2cc8f6f371c0c3973d3:d41d8cd98f00b204e9800998ecf8427e","time":{"start":1709129061739,"stop":1709129133019,"duration":71280},"description":"This test checks MongoDB database and collection creation","descriptionHtml":"<p>This test checks MongoDB database and collection creation</p>\n","status":"failed","statusMessage":"","statusTrace":"","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"testStage":{"description":"This test checks MongoDB database and collection creation","status":"failed","statusMessage":"","statusTrace":"","steps":[{"name":"Sending GET request to app.js for checking that MongoDB collections exist","time":{"start":1709129062025,"stop":1709129073049,"duration":11024},"status":"broken","statusMessage":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"MongoDB collection 'collection1' exists in database 'testdb'.\"\nReceived: \"MongoDB collection 'collection1' does not exist in database 'testdb'.\"","statusTrace":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"MongoDB collection 'collection1' exists in database 'testdb'.\"\nReceived: \"MongoDB collection 'collection1' does not exist in database 'testdb'.\"\n    at /home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/componentTests/jest/test/kafkaMongoChecks.spec.ts:236:50\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/componentTests/jest/test/kafkaMongoChecks.spec.ts:5:58)","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Sending GET request to app.js for checking that MongoDB collections exist","time":{"start":1709129062033,"stop":1709129095099,"duration":33066},"status":"broken","statusMessage":"expect(received).toBe(expected) // Object.is equality\n\nExpected: \"MongoDB collection 'writers' exists in database 'testdb'.\"\nReceived: \"MongoDB collection 'writers' does not exist in database 'testdb'.\"","statusTrace":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: \"MongoDB collection 'writers' exists in database 'testdb'.\"\nReceived: \"MongoDB collection 'writers' does not exist in database 'testdb'.\"\n    at /home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/componentTests/jest/test/kafkaMongoChecks.spec.ts:236:50\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/componentTests/jest/test/kafkaMongoChecks.spec.ts:5:58)","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"Reading and verifying information from processed-monthly-summary-data topic","time":{"start":1709129062089,"stop":1709129112093,"duration":50004},"status":"broken","statusMessage":"expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false","statusTrace":"Error: expect(received).toBe(expected) // Object.is equality\n\nExpected: true\nReceived: false\n    at /home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/componentTests/jest/test/kafkaMongoChecks.spec.ts:399:38\n    at Generator.next (<anonymous>)\n    at fulfilled (/home/runner/work/applicationToTestFromDockerCompose/applicationToTestFromDockerCompose/componentTests/jest/test/kafkaMongoChecks.spec.ts:5:58)","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":3,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"language","value":"javascript"},{"name":"framework","value":"jest"},{"name":"package","value":"test"},{"name":"thread","value":"1"},{"name":"host","value":"fv-az453-736"},{"name":"parentSuite","value":"Full regression"},{"name":"owner","value":"John Doe2"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[{"name":"Website","url":"https://dev.example.com/"},{"name":"AUTH-123","type":"issue"},{"name":"TMS-456","type":"tms"}],"hidden":false,"retry":false,"extra":{"severity":"normal","owner":"John Doe2","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"866b34db3f74a486.json","parameterValues":[]}